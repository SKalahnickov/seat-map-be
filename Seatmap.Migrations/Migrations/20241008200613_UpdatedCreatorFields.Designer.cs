// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Seatmap.Migrations;

#nullable disable

namespace Seatmap.Migrations.Migrations
{
    [DbContext(typeof(MigrationsContext))]
    [Migration("20241008200613_UpdatedCreatorFields")]
    partial class UpdatedCreatorFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Seatmap.DAL.Models.AttributeSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AttributeId")
                        .HasColumnType("text");

                    b.Property<string>("AttributeName")
                        .HasColumnType("text");

                    b.Property<Guid>("RelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("SelectionKey")
                        .HasColumnType("text");

                    b.Property<string>("SelectionValue")
                        .HasColumnType("text");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("RelationId");

                    b.ToTable("attribute_selection", (string)null);
                });

            modelBuilder.Entity("Seatmap.DAL.Models.GraphicElement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("AdjustedX")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AdjustedY")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DefaultHeight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DefaultWidth")
                        .HasColumnType("numeric");

                    b.Property<Guid>("LayerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RotationDeg")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleVersionId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("X")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Y")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("LayerId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleVersionId");

                    b.ToTable("graphic_element", (string)null);
                });

            modelBuilder.Entity("Seatmap.DAL.Models.Layer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleVersionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleVersionId");

                    b.ToTable("layer", (string)null);
                });

            modelBuilder.Entity("Seatmap.DAL.Models.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GraphicElementId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LayerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleVersionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GraphicElementId");

                    b.HasIndex("LayerId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleVersionId");

                    b.ToTable("seat", (string)null);
                });

            modelBuilder.Entity("Seatmap.DAL.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("Seatmap.DAL.Models.VehicleVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("GridSize")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_version", (string)null);
                });

            modelBuilder.Entity("Seatmap.DAL.Models.GraphicElement", b =>
                {
                    b.HasOne("Seatmap.DAL.Models.Layer", "Layer")
                        .WithMany("GraphicElements")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seatmap.DAL.Models.Vehicle", "Vehicle")
                        .WithMany("GraphicElements")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seatmap.DAL.Models.VehicleVersion", "VehicleVersion")
                        .WithMany("GraphicElements")
                        .HasForeignKey("VehicleVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleVersion");
                });

            modelBuilder.Entity("Seatmap.DAL.Models.Layer", b =>
                {
                    b.HasOne("Seatmap.DAL.Models.Vehicle", "Vehicle")
                        .WithMany("Layers")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seatmap.DAL.Models.VehicleVersion", "VehicleVersion")
                        .WithMany("Layers")
                        .HasForeignKey("VehicleVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleVersion");
                });

            modelBuilder.Entity("Seatmap.DAL.Models.Seat", b =>
                {
                    b.HasOne("Seatmap.DAL.Models.GraphicElement", "GraphicElement")
                        .WithMany("Seats")
                        .HasForeignKey("GraphicElementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seatmap.DAL.Models.Layer", "Layer")
                        .WithMany("Seats")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seatmap.DAL.Models.Vehicle", "Vehicle")
                        .WithMany("Seats")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seatmap.DAL.Models.VehicleVersion", "VehicleVersion")
                        .WithMany("Seats")
                        .HasForeignKey("VehicleVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GraphicElement");

                    b.Navigation("Layer");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleVersion");
                });

            modelBuilder.Entity("Seatmap.DAL.Models.VehicleVersion", b =>
                {
                    b.HasOne("Seatmap.DAL.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleVersions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Seatmap.DAL.Models.GraphicElement", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Seatmap.DAL.Models.Layer", b =>
                {
                    b.Navigation("GraphicElements");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Seatmap.DAL.Models.Vehicle", b =>
                {
                    b.Navigation("GraphicElements");

                    b.Navigation("Layers");

                    b.Navigation("Seats");

                    b.Navigation("VehicleVersions");
                });

            modelBuilder.Entity("Seatmap.DAL.Models.VehicleVersion", b =>
                {
                    b.Navigation("GraphicElements");

                    b.Navigation("Layers");

                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
